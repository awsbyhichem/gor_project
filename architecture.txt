1. Introduction:

Notre architecture actuelle se présente comme suit :

- Application PHP Symfony déployée sur un serveur Red Hat Linux.
- Chaîne de traitement : PHP-FPM → Apache HTTPd → Varnish Cache.

Le besoin de haute disponibilité vous conduit à :

- Ajouter un deuxième serveur ayant une architecture identique.
- Utiliser un F5 LTM pour distribuer la charge avec une configuration de sticky sessions.
- Les sessions dans un premier temps vont être stockées sur les serveurs.
- Une architecture cible et idéale à mettre en place dans un deuxiéme temps pour remplacer le stockage des sessions en local par un stockage distribué via un cluster Redis afin de ne pas perdre les sessions en cas d’indisponibilité d’un serveur.



2. Provisionnement d’un nouveau serveur:

- Provisionnement d'un nouveau serveur qui porte les mêmes caractéristiques (Hardware/OS) de serveur existant.
- Configuration du réseau,sécurité et supervision pour ce serveur.
- Installation des middlewares et outils applicatifs.
- Déploiement de l’application via CI/CD.



3. Configuration du F5 LTM pour sticky sessions:

- Configuration du pool et ajout de nouveau memebre (serveur).
- Configuration de la persistance (sticky sessions) via la création d'un profil de persistance dans l’interface de gestion du F5.


4. Architecture:



5. Architecture Cible:

5.1. Problématique des sessions locales:

- Actuellement, les sessions PHP sont stockées localement sur chaque serveur.
- Le problème de ce type d'architecture est qu'en cas de défaillance ou de basculement, les sessions existantes sur un serveur sont perdues, entraînant une déconnexion de l’utilisateur ou une perte de contexte.

5.2. Architecture idéale:

- La mise en place d'un cluster Redis pour assurer la haute disponibilité de cette brique.
- La migration du stockage des sessions locales vers un cluster Redis, assurant la continuité de l’expérience utilisateur même en cas de défaillance d’un serveur.


#########################################
############## GoReplay #################
#########################################


Contexte d'installation de GoReplay:

Pour garantir la sécurité et la stabilité de l’infrastructure, il est essentiel de :

1. Exécuter Goreplay avec des privilèges limités:

- Lancement du service avec privilèges minimaux.
- Lancer Goreplay sous un utilisateur non privilégié pour limiter les risques en cas d’attaque ou d’exploitation.

2. Isoler les logs sur un volume dédié afin d’éviter toute saturation du système de fichiers principal:

- Création d'un volume logique didiéb à GoReplay.
- Adapter (augmenter/diminuer) la taille selon le trafic en Production.

3. Surveiller en continu l’état du service et l’espace de stockage dédié via Dynatrace:

- Supervision du service Goreplay et du volume LVM.
- Activer des alertes en cas d'indisponibilité de service Goreplay et dépacement de stockage dédié.

4. Vérifier que l’outil reste léger même en cas de trafic intense grâce à des tests de performance.

- réalisation d'un test de performance en simulant une charge de trafic représentative des pics en production en utilisant l'outil "Apache Bench ab".
- Les résultats de test indique que la consommation d'un Thread de Goreplay ne dépasse pas .......Mo et ....% de CPU, d'ou une consommation totale approximatif ....

"""images"""

- Même en pic de charge, le service reste réactif et ne monopolise pas les ressources du serveur.


5. Mettre en place une rotation des logs pour une gestion optimale de l’espace disque.


- Pour éviter une accumulation excessive de logs et préserver l’espace disque, on va mettre en place une rotation des logs qui conserve uniquement les 5 derniers jours.


